import type { NextPage } from "next";
import Head from "next/head";
import { NewGame } from "../components/newgame";
import Modal from "../components/modal";
import { Rules } from "../components/rules";
import { useCallback, useEffect, useState } from "react";
import { PlayIcon, DocumentTextIcon } from '@heroicons/react/solid'
import { ModalButton } from "../components/ModalButton";
import { Player } from "../types/types";
import { FieldValues, UseFormGetValues } from "react-hook-form";
import { ScoreBoard } from "../components/ScoreBoard";
import { usePlayerStore } from "../stores/playerStore";
import { mapPlayers } from "../utils/utils";

const Home: NextPage<{}> = () => {

  const players = usePlayerStore(state => state.players)
  const setPlayerOrder = usePlayerStore(state => state.setPlayerOrder)

  const [modalIsOpen, setModalIsOpen] = useState(false)
  const [modalContent, setModalContent] = useState<JSX.Element>()
  const [gameHasStarted, setGameHasStarted] = useState(false)

  const handleOpenModal = (modalContent: JSX.Element) => {
    setModalContent(modalContent)
    setModalIsOpen(true)
  }

  const handleCloseModal = useCallback(() => {
    setModalIsOpen(false)
  }, [])

  const handleClosePlayersModal = useCallback((getValuesFunc: UseFormGetValues<FieldValues>) => {
    const mappedPlayerOrder = mapPlayers(players, getValuesFunc)
    setPlayerOrder(mappedPlayerOrder)
    handleCloseModal()
  }, [setPlayerOrder, handleCloseModal, players])

  const handleSubmit = useCallback((getValuesFunc: UseFormGetValues<FieldValues>) => {
    handleClosePlayersModal(getValuesFunc)
    setGameHasStarted(true)
  }, [handleClosePlayersModal])

  const handleUpdatePlayerPoints = (player: Player, pointsToAdd: number) => {
    let playerToUpdate = players.filter(p => p.id === player.id).at(0)

    // setPlayers([...players].map((p, i) => {
    //   return {
    //     'name': p.name,
    //     'id': p.id,
    //     'order': p.order,
    //     'score': p === playerToUpdate ? (player.score + pointsToAdd) : p.score
    //   }
    // }))
  }

  useEffect(() => {
    setModalContent(
      <NewGame
        closeModal={handleClosePlayersModal}
        onHandleSubmit={handleSubmit}
      />
    )
  }, [players, handleCloseModal, handleSubmit, handleClosePlayersModal])

  return (
    <>
      <Head>
        <title>Play Mölkky</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container flex flex-col items-center justify-center h-screen p-4 mx-auto">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Play <span className="text-purple-300">MÖLKKY</span>
        </h1>
        <div className="flex flex-col items-center w-full pt-3 mt-3 space-y-4 text-center lg:w-2/3">
          {!gameHasStarted
            ?
            <>
              <ModalButton
                name="New game"
                closeModal={handleClosePlayersModal}
                handleOpenModal={handleOpenModal}
                modalContent={
                  <NewGame
                    closeModal={handleClosePlayersModal}
                    onHandleSubmit={handleSubmit}
                  />
                }
                icon={<PlayIcon />}
              />
              <ModalButton
                name="Rules"
                closeModal={handleCloseModal}
                handleOpenModal={handleOpenModal}
                modalContent={<Rules />}
                icon={<DocumentTextIcon />}
              />
            </>
            : <ScoreBoard players={players} updatePlayerPoints={handleUpdatePlayerPoints} />
          }
        </div>
        <Modal isOpen={modalIsOpen} closeModal={handleCloseModal}>
          {modalContent}
        </Modal>
      </main>
    </>
  );
};

export default Home;